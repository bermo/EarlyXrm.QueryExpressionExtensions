//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]

namespace EarlyBoundTypes
{
	using System;
	using System.Linq;
	using Microsoft.Xrm.Sdk;
	using System.Runtime.Serialization;
	using Microsoft.Xrm.Sdk.Client;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Diagnostics.CodeAnalysis;
	
	
	[DataContract()]
	public enum ComponentState
	{
		
		[Description("Deleted")]
		[EnumMember()]
		Deleted = 2,
		
		[Description("Deleted Unpublished")]
		[EnumMember()]
		DeletedUnpublished = 3,
		
		[Description("Published")]
		[EnumMember()]
		Published = 0,
		
		[Description("Unpublished")]
		[EnumMember()]
		Unpublished = 1,
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("report")]
	[ExcludeFromCodeCoverage()]
	public partial class Report : EarlyEntity
	{
		
		public Report() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("bodybinary")]
		public string BodyBinary
		{
			get
			{
				return GetAttributeValue<string>("bodybinary");
			}
			set
			{
				SetAttributeValue("bodybinary", nameof(BodyBinary), value);
			}
		}
		
		[AttributeLogicalNameAttribute("bodytext")]
		public string BodyText
		{
			get
			{
				return GetAttributeValue<string>("bodytext");
			}
			set
			{
				SetAttributeValue("bodytext", nameof(BodyText), value);
			}
		}
		
		[AttributeLogicalNameAttribute("originalbodytext")]
		public string BodyText2
		{
			get
			{
				return GetAttributeValue<string>("originalbodytext");
			}
			set
			{
				SetAttributeValue("originalbodytext", nameof(BodyText2), value);
			}
		}
		
		[AttributeLogicalNameAttribute("rdlhash")]
		public int? BodyTextHash
		{
			get
			{
				return GetAttributeValue<int?>("rdlhash");
			}
			set
			{
				SetAttributeValue("rdlhash", nameof(BodyTextHash), value);
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
			set
			{
				SetAttributeValue("componentstate", nameof(ComponentState), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdinmajorversion")]
		public int? CrmVersionInWhichTheReportIsCreated
		{
			get
			{
				return GetAttributeValue<int?>("createdinmajorversion");
			}
			set
			{
				SetAttributeValue("createdinmajorversion", nameof(CrmVersionInWhichTheReportIsCreated), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		[AttributeLogicalNameAttribute("customreportxml")]
		public string CustomReportXML
		{
			get
			{
				return GetAttributeValue<string>("customreportxml");
			}
			set
			{
				SetAttributeValue("customreportxml", nameof(CustomReportXML), value);
			}
		}
		
		[AttributeLogicalNameAttribute("defaultfilter")]
		public string DefaultFilter
		{
			get
			{
				return GetAttributeValue<string>("defaultfilter");
			}
			set
			{
				SetAttributeValue("defaultfilter", nameof(DefaultFilter), value);
			}
		}
		
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return GetAttributeValue<string>("description");
			}
			set
			{
				SetAttributeValue("description", nameof(Description), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reports";
		
		public const string EntityLogicalName = "report";
		
		public const string EntitySetName = "reports";
		
		[AttributeLogicalNameAttribute("filename")]
		public string FileName
		{
			get
			{
				return GetAttributeValue<string>("filename");
			}
			set
			{
				SetAttributeValue("filename", nameof(FileName), value);
			}
		}
		
		[AttributeLogicalNameAttribute("filesize")]
		public int? FileSizeBytes
		{
			get
			{
				return GetAttributeValue<int?>("filesize");
			}
			set
			{
				SetAttributeValue("filesize", nameof(FileSizeBytes), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return GetAttributeValue<string>("introducedversion");
			}
			set
			{
				SetAttributeValue("introducedversion", nameof(IntroducedVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomreport")]
		public bool? IsCustomReport
		{
			get
			{
				return GetAttributeValue<bool?>("iscustomreport");
			}
			set
			{
				SetAttributeValue("iscustomreport", nameof(IsCustomReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
			set
			{
				SetAttributeValue("ismanaged", nameof(IsManaged), value);
			}
		}
		
		[AttributeLogicalNameAttribute("isscheduledreport")]
		public bool? IsScheduledReport
		{
			get
			{
				return GetAttributeValue<bool?>("isscheduledreport");
			}
			set
			{
				SetAttributeValue("isscheduledreport", nameof(IsScheduledReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("languagecode")]
		public int? Language
		{
			get
			{
				return GetAttributeValue<int?>("languagecode");
			}
			set
			{
				SetAttributeValue("languagecode", nameof(Language), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportlink_sub")]
		public IEnumerable<ReportLink> LinkedReportReportLinks2
		{
			get
			{
				return GetRelatedEntities<ReportLink>("report_reportlink_sub");
			}
			set
			{
				SetRelatedEntities<ReportLink>("report_reportlink_sub", nameof(LinkedReportReportLinks2), value);
			}
		}
		
		[AttributeLogicalNameAttribute("bodyurl")]
		public string LinkedReportURL
		{
			get
			{
				return GetAttributeValue<string>("bodyurl");
			}
			set
			{
				SetAttributeValue("bodyurl", nameof(LinkedReportURL), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportlink")]
		public IEnumerable<ReportLink> MainReportReportLinks
		{
			get
			{
				return GetRelatedEntities<ReportLink>("report_reportlink");
			}
			set
			{
				SetRelatedEntities<ReportLink>("report_reportlink", nameof(MainReportReportLinks), value);
			}
		}
		
		[AttributeLogicalNameAttribute("mimetype")]
		public string MimeType
		{
			get
			{
				return GetAttributeValue<string>("mimetype");
			}
			set
			{
				SetAttributeValue("mimetype", nameof(MimeType), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return GetAttributeValue<string>("name");
			}
			set
			{
				SetAttributeValue("name", nameof(Name), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportnameonsrs")]
		public string NameOnSRS
		{
			get
			{
				return GetAttributeValue<string>("reportnameonsrs");
			}
			set
			{
				SetAttributeValue("reportnameonsrs", nameof(NameOnSRS), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference OwnerRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(OwnerRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnitRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningbusinessunit");
			}
			set
			{
				SetAttributeValue("owningbusinessunit", nameof(OwningBusinessUnitRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeamRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningteam");
			}
			set
			{
				SetAttributeValue("owningteam", nameof(OwningTeamRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUserRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("owninguser");
			}
			set
			{
				SetAttributeValue("owninguser", nameof(OwningUserRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("parentreportid")]
		[RelationshipSchemaNameAttribute("report_parent_report", EntityRole.Referencing)]
		public Report ParentReport
		{
			get
			{
				return GetRelatedEntity<Report>("report_parent_report", EntityRole.Referencing);
			}
			set
			{
				SetRelatedEntity<Report>("report_parent_report", nameof(ParentReport), value, EntityRole.Referencing);
			}
		}
		
		[AttributeLogicalNameAttribute("parentreportid")]
		public EntityReference ParentReportRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentreportid");
			}
			set
			{
				SetAttributeValue("parentreportid", nameof(ParentReportRef), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_parent_report", EntityRole.Referenced)]
		public IEnumerable<Report> ParentReportReports
		{
			get
			{
				return GetRelatedEntities<Report>("report_parent_report", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<Report>("report_parent_report", nameof(ParentReportReports), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("queryinfo")]
		public string QueryInfoStructure
		{
			get
			{
				return GetAttributeValue<string>("queryinfo");
			}
			set
			{
				SetAttributeValue("queryinfo", nameof(QueryInfoStructure), value);
			}
		}
		
		[AttributeLogicalNameAttribute("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				return GetAttributeValue<DateTime?>("overwritetime");
			}
			set
			{
				SetAttributeValue("overwritetime", nameof(RecordOverwriteTime), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportidunique")]
		public Guid? ReportIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportidunique");
			}
			set
			{
				SetAttributeValue("reportidunique", nameof(ReportIdUnique), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportcategories")]
		public IEnumerable<ReportRelatedCategory> ReportRelatedCategories
		{
			get
			{
				return GetRelatedEntities<ReportRelatedCategory>("report_reportcategories");
			}
			set
			{
				SetRelatedEntities<ReportRelatedCategory>("report_reportcategories", nameof(ReportRelatedCategories), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportentities")]
		public IEnumerable<ReportRelatedEntity> ReportRelatedEntities
		{
			get
			{
				return GetRelatedEntities<ReportRelatedEntity>("report_reportentities");
			}
			set
			{
				SetRelatedEntities<ReportRelatedEntity>("report_reportentities", nameof(ReportRelatedEntities), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signaturedate")]
		public DateTime? ReportSignatureDate
		{
			get
			{
				return GetAttributeValue<DateTime?>("signaturedate");
			}
			set
			{
				SetAttributeValue("signaturedate", nameof(ReportSignatureDate), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signaturemajorversion")]
		public int? ReportSignatureMajorVersion
		{
			get
			{
				return GetAttributeValue<int?>("signaturemajorversion");
			}
			set
			{
				SetAttributeValue("signaturemajorversion", nameof(ReportSignatureMajorVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signatureminorversion")]
		public int? ReportSignatureMinorVersion
		{
			get
			{
				return GetAttributeValue<int?>("signatureminorversion");
			}
			set
			{
				SetAttributeValue("signatureminorversion", nameof(ReportSignatureMinorVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reporttypecode")]
		public Enums.ReportType? ReportType
		{
			get
			{
				return (Enums.ReportType?)GetAttributeValue<OptionSetValue>("reporttypecode")?.Value;
			}
			set
			{
				SetAttributeValue("reporttypecode", nameof(ReportType), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportvisibility")]
		public IEnumerable<ReportVisibility> ReportVisibilities
		{
			get
			{
				return GetRelatedEntities<ReportVisibility>("report_reportvisibility");
			}
			set
			{
				SetRelatedEntities<ReportVisibility>("report_reportvisibility", nameof(ReportVisibilities), value);
			}
		}
		
		[AttributeLogicalNameAttribute("schedulexml")]
		public string ScheduleDefinitionXML
		{
			get
			{
				return GetAttributeValue<string>("schedulexml");
			}
			set
			{
				SetAttributeValue("schedulexml", nameof(ScheduleDefinitionXML), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signatureid")]
		public Guid? SignatureId
		{
			get
			{
				return GetAttributeValue<Guid?>("signatureid");
			}
			set
			{
				SetAttributeValue("signatureid", nameof(SignatureId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signaturelcid")]
		public int? SignatureLanguageCode
		{
			get
			{
				return GetAttributeValue<int?>("signaturelcid");
			}
			set
			{
				SetAttributeValue("signaturelcid", nameof(SignatureLanguageCode), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? SolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
			set
			{
				SetAttributeValue("solutionid", nameof(SolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? SupportingSolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
			set
			{
				SetAttributeValue("supportingsolutionid", nameof(SupportingSolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				return GetAttributeValue<int?>("timezoneruleversionnumber");
			}
			set
			{
				SetAttributeValue("timezoneruleversionnumber", nameof(TimeZoneRuleVersionNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				return GetAttributeValue<int?>("utcconversiontimezonecode");
			}
			set
			{
				SetAttributeValue("utcconversiontimezonecode", nameof(UTCConversionTimeZoneCode), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ispersonal")]
		public bool? ViewableBy
		{
			get
			{
				return GetAttributeValue<bool?>("ispersonal");
			}
			set
			{
				SetAttributeValue("ispersonal", nameof(ViewableBy), value);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum ReportType
			{
				
				[Description("Linked Report")]
				[EnumMember()]
				LinkedReport = 3,
				
				[Description("Other Report")]
				[EnumMember()]
				OtherReport = 2,
				
				[Description("Reporting Services Report")]
				[EnumMember()]
				ReportingServicesReport = 1,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string BodyBinary = "bodybinary";
			
			public const string BodyText = "bodytext";
			
			public const string BodyText2 = "originalbodytext";
			
			public const string BodyTextHash = "rdlhash";
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedByRef = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string CrmVersionInWhichTheReportIsCreated = "createdinmajorversion";
			
			public const string Customizable = "iscustomizable";
			
			public const string CustomReportXML = "customreportxml";
			
			public const string DefaultFilter = "defaultfilter";
			
			public const string Description = "description";
			
			public const string FileName = "filename";
			
			public const string FileSizeBytes = "filesize";
			
			public const string Id = "reportid";
			
			public const string IntroducedVersion = "introducedversion";
			
			public const string IsCustomReport = "iscustomreport";
			
			public const string IsManaged = "ismanaged";
			
			public const string IsScheduledReport = "isscheduledreport";
			
			public const string Language = "languagecode";
			
			public const string LinkedReportURL = "bodyurl";
			
			public const string MimeType = "mimetype";
			
			public const string ModifiedByRef = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Name = "name";
			
			public const string NameOnSRS = "reportnameonsrs";
			
			public const string OwnerRef = "ownerid";
			
			public const string OwningBusinessUnitRef = "owningbusinessunit";
			
			public const string OwningTeamRef = "owningteam";
			
			public const string OwningUserRef = "owninguser";
			
			public const string ParentReportRef = "parentreportid";
			
			public const string QueryInfoStructure = "queryinfo";
			
			public const string RecordOverwriteTime = "overwritetime";
			
			public const string ReportIdUnique = "reportidunique";
			
			public const string ReportSignatureDate = "signaturedate";
			
			public const string ReportSignatureMajorVersion = "signaturemajorversion";
			
			public const string ReportSignatureMinorVersion = "signatureminorversion";
			
			public const string ReportType = "reporttypecode";
			
			public const string ScheduleDefinitionXML = "schedulexml";
			
			public const string SignatureId = "signatureid";
			
			public const string SignatureLanguageCode = "signaturelcid";
			
			public const string SolutionId = "solutionid";
			
			public const string SupportingSolutionId = "supportingsolutionid";
			
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			
			public const string VersionNumber = "versionnumber";
			
			public const string ViewableBy = "ispersonal";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string LinkedReportReportLinks2 = "report_reportlink_sub";
			
			public const string MainReportReportLinks = "report_reportlink";
			
			public const string ParentReport = "report_parent_report";
			
			public const string ParentReportReports = "report_parent_report";
			
			public const string ReportRelatedCategories = "report_reportcategories";
			
			public const string ReportRelatedEntities = "report_reportentities";
			
			public const string ReportVisibilities = "report_reportvisibility";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportlink")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportLink : EarlyEntity
	{
		
		public ReportLink() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportlinks";
		
		public const string EntityLogicalName = "reportlink";
		
		public const string EntitySetName = "reportlinks";
		
		[AttributeLogicalNameAttribute("reportlinkid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportlinkid");
			}
			set
			{
				SetAttributeValue("reportlinkid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("linkedreportid")]
		[RelationshipSchemaNameAttribute("report_reportlink_sub")]
		public Report LinkedReport
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportlink_sub");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportlink_sub", nameof(LinkedReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("linkedreportname")]
		public string LinkedReportName
		{
			get
			{
				return GetAttributeValue<string>("linkedreportname");
			}
			set
			{
				SetAttributeValue("linkedreportname", nameof(LinkedReportName), value);
			}
		}
		
		[AttributeLogicalNameAttribute("linkedreportid")]
		public EntityReference LinkedReportRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("linkedreportid");
			}
			set
			{
				SetAttributeValue("linkedreportid", nameof(LinkedReportRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("linktypecode")]
		public Enums.LinkType? LinkType
		{
			get
			{
				return (Enums.LinkType?)GetAttributeValue<OptionSetValue>("linktypecode")?.Value;
			}
			set
			{
				SetAttributeValue("linktypecode", nameof(LinkType), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportlink")]
		public Report MainReport
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportlink");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportlink", nameof(MainReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference MainReportRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(MainReportRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference OwnerRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(OwnerRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
			set
			{
				SetAttributeValue("owningbusinessunit", nameof(OwningBusinessUnit), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
			set
			{
				SetAttributeValue("owninguser", nameof(OwningUser), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportlinkidunique")]
		public Guid? ReportLinkIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportlinkidunique");
			}
			set
			{
				SetAttributeValue("reportlinkidunique", nameof(ReportLinkIdUnique), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum LinkType
			{
				
				[Description("Drill-through")]
				[EnumMember()]
				Drillthrough = 1,
				
				[Description("Drill-through and sub-report")]
				[EnumMember()]
				DrillThroughAndSubReport = 3,
				
				[Description("Sub-report")]
				[EnumMember()]
				Subreport = 2,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string CreatedByRef = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Id = "reportlinkid";
			
			public const string LinkedReportName = "linkedreportname";
			
			public const string LinkedReportRef = "linkedreportid";
			
			public const string LinkType = "linktypecode";
			
			public const string MainReportRef = "reportid";
			
			public const string ModifiedByRef = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string OwnerRef = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string ReportLinkIdUnique = "reportlinkidunique";
			
			public const string VersionNumber = "versionnumber";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string LinkedReport = "report_reportlink_sub";
			
			public const string MainReport = "report_reportlink";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportcategory")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportRelatedCategory : EarlyEntity
	{
		
		public ReportRelatedCategory() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("categorycode")]
		public Enums.Category? Category
		{
			get
			{
				return (Enums.Category?)GetAttributeValue<OptionSetValue>("categorycode")?.Value;
			}
			set
			{
				SetAttributeValue("categorycode", nameof(Category), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
			set
			{
				SetAttributeValue("componentstate", nameof(ComponentState), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference CurrencyRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				SetAttributeValue("transactioncurrencyid", nameof(CurrencyRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportcategories";
		
		public const string EntityLogicalName = "reportcategory";
		
		public const string EntitySetName = "reportcategories";
		
		[AttributeLogicalNameAttribute("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				return GetAttributeValue<decimal?>("exchangerate");
			}
			set
			{
				SetAttributeValue("exchangerate", nameof(ExchangeRate), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportcategoryid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportcategoryid");
			}
			set
			{
				SetAttributeValue("reportcategoryid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
			set
			{
				SetAttributeValue("ismanaged", nameof(IsManaged), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference OwnerRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(OwnerRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
			set
			{
				SetAttributeValue("owningbusinessunit", nameof(OwningBusinessUnit), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
			set
			{
				SetAttributeValue("owninguser", nameof(OwningUser), value);
			}
		}
		
		[AttributeLogicalNameAttribute("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				return GetAttributeValue<DateTime?>("overwritetime");
			}
			set
			{
				SetAttributeValue("overwritetime", nameof(RecordOverwriteTime), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportcategories")]
		public Report Report1
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportcategories");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportcategories", nameof(Report1), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportcategoryidunique")]
		public Guid? ReportCategoryIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportcategoryidunique");
			}
			set
			{
				SetAttributeValue("reportcategoryidunique", nameof(ReportCategoryIdUnique), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference ReportRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(ReportRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? SolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
			set
			{
				SetAttributeValue("solutionid", nameof(SolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? SupportingSolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
			set
			{
				SetAttributeValue("supportingsolutionid", nameof(SupportingSolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("timezoneruleversionnumber")]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				return GetAttributeValue<int?>("timezoneruleversionnumber");
			}
			set
			{
				SetAttributeValue("timezoneruleversionnumber", nameof(TimeZoneRuleVersionNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("utcconversiontimezonecode")]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				return GetAttributeValue<int?>("utcconversiontimezonecode");
			}
			set
			{
				SetAttributeValue("utcconversiontimezonecode", nameof(UTCConversionTimeZoneCode), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum Category
			{
				
				[Description("Administrative Reports")]
				[EnumMember()]
				AdministrativeReports = 4,
				
				[Description("Marketing Reports")]
				[EnumMember()]
				MarketingReports = 3,
				
				[Description("Sales Reports")]
				[EnumMember()]
				SalesReports = 1,
				
				[Description("Service Reports")]
				[EnumMember()]
				ServiceReports = 2,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string Category = "categorycode";
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedByRef = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string CurrencyRef = "transactioncurrencyid";
			
			public const string Customizable = "iscustomizable";
			
			public const string ExchangeRate = "exchangerate";
			
			public const string Id = "reportcategoryid";
			
			public const string IsManaged = "ismanaged";
			
			public const string ModifiedByRef = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string OwnerRef = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string RecordOverwriteTime = "overwritetime";
			
			public const string ReportCategoryIdUnique = "reportcategoryidunique";
			
			public const string ReportRef = "reportid";
			
			public const string SolutionId = "solutionid";
			
			public const string SupportingSolutionId = "supportingsolutionid";
			
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			
			public const string VersionNumber = "versionnumber";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Report1 = "report_reportcategories";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportentity")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportRelatedEntity : EarlyEntity
	{
		
		public ReportRelatedEntity() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
			set
			{
				SetAttributeValue("componentstate", nameof(ComponentState), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportentities";
		
		public const string EntityLogicalName = "reportentity";
		
		public const string EntitySetName = "reportentities";
		
		[AttributeLogicalNameAttribute("isfilterable")]
		public bool? Filterable
		{
			get
			{
				return GetAttributeValue<bool?>("isfilterable");
			}
			set
			{
				SetAttributeValue("isfilterable", nameof(Filterable), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportentityid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportentityid");
			}
			set
			{
				SetAttributeValue("reportentityid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
			set
			{
				SetAttributeValue("ismanaged", nameof(IsManaged), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference OwnerRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(OwnerRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
			set
			{
				SetAttributeValue("owningbusinessunit", nameof(OwningBusinessUnit), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
			set
			{
				SetAttributeValue("owninguser", nameof(OwningUser), value);
			}
		}
		
		[AttributeLogicalNameAttribute("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				return GetAttributeValue<DateTime?>("overwritetime");
			}
			set
			{
				SetAttributeValue("overwritetime", nameof(RecordOverwriteTime), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportentities")]
		public Report Report1
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportentities");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportentities", nameof(Report1), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportentityidunique")]
		public Guid? ReportEntityIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportentityidunique");
			}
			set
			{
				SetAttributeValue("reportentityidunique", nameof(ReportEntityIdUnique), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference ReportRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(ReportRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("objecttypecode")]
		public string ReportRelatedEntity2
		{
			get
			{
				return GetAttributeValue<string>("objecttypecode");
			}
			set
			{
				SetAttributeValue("objecttypecode", nameof(ReportRelatedEntity2), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? SolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
			set
			{
				SetAttributeValue("solutionid", nameof(SolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? SupportingSolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
			set
			{
				SetAttributeValue("supportingsolutionid", nameof(SupportingSolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedByRef = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Customizable = "iscustomizable";
			
			public const string Filterable = "isfilterable";
			
			public const string Id = "reportentityid";
			
			public const string IsManaged = "ismanaged";
			
			public const string ModifiedByRef = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string OwnerRef = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string RecordOverwriteTime = "overwritetime";
			
			public const string ReportEntityIdUnique = "reportentityidunique";
			
			public const string ReportRef = "reportid";
			
			public const string ReportRelatedEntity2 = "objecttypecode";
			
			public const string SolutionId = "solutionid";
			
			public const string SupportingSolutionId = "supportingsolutionid";
			
			public const string VersionNumber = "versionnumber";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Report1 = "report_reportentities";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportvisibility")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportVisibility : EarlyEntity
	{
		
		public ReportVisibility() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
			set
			{
				SetAttributeValue("componentstate", nameof(ComponentState), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				SetAttributeValue("createdby", nameof(CreatedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
			set
			{
				SetAttributeValue("createdon", nameof(CreatedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportvisibilities";
		
		public const string EntityLogicalName = "reportvisibility";
		
		public const string EntitySetName = "reportvisibilities";
		
		[AttributeLogicalNameAttribute("reportvisibilityid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportvisibilityid");
			}
			set
			{
				SetAttributeValue("reportvisibilityid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
			set
			{
				SetAttributeValue("ismanaged", nameof(IsManaged), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedByRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				SetAttributeValue("modifiedby", nameof(ModifiedByRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
			set
			{
				SetAttributeValue("modifiedon", nameof(ModifiedOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference OwnerRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(OwnerRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
			set
			{
				SetAttributeValue("owningbusinessunit", nameof(OwningBusinessUnit), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
			set
			{
				SetAttributeValue("owninguser", nameof(OwningUser), value);
			}
		}
		
		[AttributeLogicalNameAttribute("overwritetime")]
		public DateTime? RecordOverwriteTime
		{
			get
			{
				return GetAttributeValue<DateTime?>("overwritetime");
			}
			set
			{
				SetAttributeValue("overwritetime", nameof(RecordOverwriteTime), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportvisibility")]
		public Report Report1
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportvisibility");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportvisibility", nameof(Report1), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference ReportRef
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(ReportRef), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportvisibilityidunique")]
		public Guid? ReportVisibilityIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportvisibilityidunique");
			}
			set
			{
				SetAttributeValue("reportvisibilityidunique", nameof(ReportVisibilityIdUnique), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? SolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
			set
			{
				SetAttributeValue("solutionid", nameof(SolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? SupportingSolutionId
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
			set
			{
				SetAttributeValue("supportingsolutionid", nameof(SupportingSolutionId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				return GetAttributeValue<long?>("versionnumber");
			}
			set
			{
				SetAttributeValue("versionnumber", nameof(VersionNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("visibilitycode")]
		public Enums.Visibility? Visibility
		{
			get
			{
				return (Enums.Visibility?)GetAttributeValue<OptionSetValue>("visibilitycode")?.Value;
			}
			set
			{
				SetAttributeValue("visibilitycode", nameof(Visibility), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum Visibility
			{
				
				[Description("Forms for related record types")]
				[EnumMember()]
				FormsForRelatedRecordTypes = 2,
				
				[Description("Lists for related record types")]
				[EnumMember()]
				ListsForRelatedRecordTypes = 3,
				
				[Description("Reports area")]
				[EnumMember()]
				ReportsArea = 1,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedByRef = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Customizable = "iscustomizable";
			
			public const string Id = "reportvisibilityid";
			
			public const string IsManaged = "ismanaged";
			
			public const string ModifiedByRef = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string OwnerRef = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string RecordOverwriteTime = "overwritetime";
			
			public const string ReportRef = "reportid";
			
			public const string ReportVisibilityIdUnique = "reportvisibilityidunique";
			
			public const string SolutionId = "solutionid";
			
			public const string SupportingSolutionId = "supportingsolutionid";
			
			public const string VersionNumber = "versionnumber";
			
			public const string Visibility = "visibilitycode";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Report1 = "report_reportvisibility";
		}
	}
	
	[DataContract()]
	[ExcludeFromCodeCoverage()]
	public abstract class EarlyEntity : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		public EarlyEntity(string entityLogicalName) : base(entityLogicalName) { }
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected void OnPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
		
		protected void OnPropertyChanging(string propertyName)
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
		
		public IEnumerable<T> GetAttributeValues<T>(string attributeLogicalName) where T : Entity
	    {
		    return base.GetAttributeValue<EntityCollection>(attributeLogicalName)?.Entities?.Cast<T>();
	    }
		
		protected void SetAttributeValues<T>(string logicalName, string attributePropertyName, IEnumerable<T> value)  where T : Entity
        {
            SetAttributeValue(logicalName, attributePropertyName, new EntityCollection(new List<Entity>(value)));
        }
		
		protected void SetAttributeValue(string logicalName, string attributePropertyName, object value)
        {
            OnPropertyChanging(attributePropertyName);
            base.SetAttributeValue(logicalName, value);
            OnPropertyChanged(attributePropertyName);
        }
		
		protected new T GetRelatedEntity<T>(string relationshipSchemaName, EntityRole? primaryEntityRole = null) where T : Entity
        {
            return base.GetRelatedEntity<T>(relationshipSchemaName, primaryEntityRole);
        }
		
		protected void SetRelatedEntity<T>(string relationshipSchemaName, string attributePropertyName, T entity, EntityRole? primaryEntityRole = null) where T : Entity
        {
            OnPropertyChanging(attributePropertyName);
            base.SetRelatedEntity(relationshipSchemaName, primaryEntityRole, entity);
            OnPropertyChanged(attributePropertyName);
        }
		
		protected new IEnumerable<T> GetRelatedEntities<T>(string relationshipSchemaName, EntityRole? primaryEntityRole = null) where T : Entity
        {
            return base.GetRelatedEntities<T>(relationshipSchemaName, primaryEntityRole);
        }
		
		protected void SetRelatedEntities<T>(string relationshipSchemaName, string attributePropertyName, IEnumerable<T> entities, EntityRole? primaryEntityRole = null) where T : Entity
        {
            OnPropertyChanging(attributePropertyName);
            base.SetRelatedEntities(relationshipSchemaName, primaryEntityRole, entities);
            OnPropertyChanged(attributePropertyName);
        }
	}
}
