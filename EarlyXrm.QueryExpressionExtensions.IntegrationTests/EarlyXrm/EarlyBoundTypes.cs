//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]

namespace EarlyBoundTypes
{
	using System;
	using System.Linq;
	using Microsoft.Xrm.Sdk;
	using System.Runtime.Serialization;
	using Microsoft.Xrm.Sdk.Client;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Diagnostics.CodeAnalysis;
	
	
	[DataContract()]
	[EntityLogicalNameAttribute("category")]
	[ExcludeFromCodeCoverage()]
	public partial class Category : EarlyEntity
	{
		
		public Category() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("categorynumber")]
		public string CategoryNumber
		{
			get
			{
				return GetAttributeValue<string>("categorynumber");
			}
			set
			{
				SetAttributeValue("categorynumber", nameof(CategoryNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return GetAttributeValue<string>("description");
			}
			set
			{
				SetAttributeValue("description", nameof(Description), value);
			}
		}
		
		[AttributeLogicalNameAttribute("sequencenumber")]
		public int? DisplayOrder
		{
			get
			{
				return GetAttributeValue<int?>("sequencenumber");
			}
			set
			{
				SetAttributeValue("sequencenumber", nameof(DisplayOrder), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "categories ";
		
		public const string EntityLogicalName = "category";
		
		public const string EntitySetName = "categories";
		
		[AttributeLogicalNameAttribute("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				return GetAttributeValue<decimal?>("exchangerate");
			}
		}
		
		[AttributeLogicalNameAttribute("categoryid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("categoryid");
			}
			set
			{
				SetAttributeValue("categoryid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeProvider(typeof(KnowledgeArticleCategory))]
		[RelationshipSchemaNameAttribute("knowledgearticle_category")]
		public IEnumerable<KnowledgeArticle> KnowledgeArticles
		{
			get
			{
				return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_category");
			}
			set
			{
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_category", nameof(KnowledgeArticles), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(Owner), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("parentcategoryid")]
		public EntityReference ParentCategory
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentcategoryid");
			}
			set
			{
				SetAttributeValue("parentcategoryid", nameof(ParentCategory), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("category_parent_category", EntityRole.Referenced)]
		public IEnumerable<Category> ParentCategory_Categories
		{
			get
			{
				return GetRelatedEntities<Category>("category_parent_category", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<Category>("category_parent_category", nameof(ParentCategory_Categories), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("parentcategoryid")]
		[RelationshipSchemaNameAttribute("category_parent_category", EntityRole.Referencing)]
		public Category ParentCategory_Category
		{
			get
			{
				return GetRelatedEntity<Category>("category_parent_category", EntityRole.Referencing);
			}
			set
			{
				SetRelatedEntity<Category>("category_parent_category", nameof(ParentCategory_Category), value, EntityRole.Referencing);
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("title")]
		public string Title
		{
			get
			{
				return GetAttributeValue<string>("title");
			}
			set
			{
				SetAttributeValue("title", nameof(Title), value);
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string CategoryNumber = "categorynumber";
			
			public const string CreatedBy = "createdby";
			
			public const string Description = "description";
			
			public const string DisplayOrder = "sequencenumber";
			
			public const string ExchangeRate = "exchangerate";
			
			public const string Id = "categoryid";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningTeam = "owningteam";
			
			public const string OwningUser = "owninguser";
			
			public const string ParentCategory = "parentcategoryid";
			
			public const string RecordCreatedOn = "createdon";
			
			public const string Title = "title";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string KnowledgeArticles = "knowledgearticle_category";
			
			public const string ParentCategory_Categories = "category_parent_category";
			
			public const string ParentCategory_Category = "category_parent_category";
		}
	}
	
	[DataContract()]
	public enum ComponentState
	{
		
		[Description("Deleted")]
		[EnumMember()]
		Deleted = 2,
		
		[Description("Deleted Unpublished")]
		[EnumMember()]
		DeletedUnpublished = 3,
		
		[Description("Published")]
		[EnumMember()]
		Published = 0,
		
		[Description("Unpublished")]
		[EnumMember()]
		Unpublished = 1,
	}
	
	[DataContract()]
	public enum IsInherited
	{
		
		[Description("Direct User (Basic) access level and Team privileges")]
		[EnumMember()]
		DirectUserBasicAccessLevelAndTeamPrivileges = 1,
		
		[Description("Team privileges only")]
		[EnumMember()]
		TeamPrivilegesOnly = 0,
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("knowledgearticle")]
	[ExcludeFromCodeCoverage()]
	public partial class KnowledgeArticle : EarlyEntity
	{
		
		public KnowledgeArticle() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("articlepublicnumber")]
		public string ArticlePublicNumber
		{
			get
			{
				return GetAttributeValue<string>("articlepublicnumber");
			}
			set
			{
				SetAttributeValue("articlepublicnumber", nameof(ArticlePublicNumber), value);
			}
		}
		
		[AttributeProvider(typeof(KnowledgeArticleCategory))]
		[RelationshipSchemaNameAttribute("knowledgearticle_category")]
		public IEnumerable<Category> Categories
		{
			get
			{
				return GetRelatedEntities<Category>("knowledgearticle_category");
			}
			set
			{
				SetRelatedEntities<Category>("knowledgearticle_category", nameof(Categories), value);
			}
		}
		
		[AttributeLogicalNameAttribute("content")]
		public string Content
		{
			get
			{
				return GetAttributeValue<string>("content");
			}
			set
			{
				SetAttributeValue("content", nameof(Content), value);
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("traversedpath")]
		public string DeprecatedTraversedPath
		{
			get
			{
				return GetAttributeValue<string>("traversedpath");
			}
			set
			{
				SetAttributeValue("traversedpath", nameof(DeprecatedTraversedPath), value);
			}
		}
		
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return GetAttributeValue<string>("description");
			}
			set
			{
				SetAttributeValue("description", nameof(Description), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "knowledgearticles";
		
		public const string EntityLogicalName = "knowledgearticle";
		
		public const string EntitySetName = "knowledgearticles";
		
		[AttributeLogicalNameAttribute("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				return GetAttributeValue<decimal?>("exchangerate");
			}
		}
		
		[AttributeLogicalNameAttribute("expirationdate")]
		public DateTime? ExpirationDate
		{
			get
			{
				return GetAttributeValue<DateTime?>("expirationdate");
			}
			set
			{
				SetAttributeValue("expirationdate", nameof(ExpirationDate), value);
			}
		}
		
		[AttributeLogicalNameAttribute("expirationstateid")]
		public int? ExpirationStateId
		{
			get
			{
				return GetAttributeValue<int?>("expirationstateid");
			}
			set
			{
				SetAttributeValue("expirationstateid", nameof(ExpirationStateId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("expiredreviewoptions")]
		public Enums.ExpiredReviewOptions? ExpiredReviewOptions
		{
			get
			{
				return (Enums.ExpiredReviewOptions?)GetAttributeValue<OptionSetValue>("expiredreviewoptions")?.Value;
			}
			set
			{
				SetAttributeValue("expiredreviewoptions", nameof(ExpiredReviewOptions), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("expirationstatusid")]
		public int? ExpiredStatus
		{
			get
			{
				return GetAttributeValue<int?>("expirationstatusid");
			}
			set
			{
				SetAttributeValue("expirationstatusid", nameof(ExpiredStatus), value);
			}
		}
		
		[AttributeLogicalNameAttribute("knowledgearticleid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("knowledgearticleid");
			}
			set
			{
				SetAttributeValue("knowledgearticleid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("msdyn_ingestedarticleurl")]
		public string IngestedArticleURL
		{
			get
			{
				return GetAttributeValue<string>("msdyn_ingestedarticleurl");
			}
			set
			{
				SetAttributeValue("msdyn_ingestedarticleurl", nameof(IngestedArticleURL), value);
			}
		}
		
		[AttributeLogicalNameAttribute("isinternal")]
		public bool? Internal
		{
			get
			{
				return GetAttributeValue<bool?>("isinternal");
			}
			set
			{
				SetAttributeValue("isinternal", nameof(Internal), value);
			}
		}
		
		[AttributeLogicalNameAttribute("msdyn_isingestedarticle")]
		public bool? IsIngestedArticle
		{
			get
			{
				return GetAttributeValue<bool?>("msdyn_isingestedarticle");
			}
			set
			{
				SetAttributeValue("msdyn_isingestedarticle", nameof(IsIngestedArticle), value);
			}
		}
		
		[AttributeLogicalNameAttribute("islatestversion")]
		public bool? IsLatestVersion
		{
			get
			{
				return GetAttributeValue<bool?>("islatestversion");
			}
			set
			{
				SetAttributeValue("islatestversion", nameof(IsLatestVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("keywords")]
		public string Keywords
		{
			get
			{
				return GetAttributeValue<string>("keywords");
			}
			set
			{
				SetAttributeValue("keywords", nameof(Keywords), value);
			}
		}
		
		[AttributeLogicalNameAttribute("knowledgearticleviews_date")]
		public DateTime? KnowledgeArticleViewLastUpdatedTime
		{
			get
			{
				return GetAttributeValue<DateTime?>("knowledgearticleviews_date");
			}
		}
		
		[AttributeLogicalNameAttribute("knowledgearticleviews")]
		public int? KnowledgeArticleViews
		{
			get
			{
				return GetAttributeValue<int?>("knowledgearticleviews");
			}
		}
		
		[AttributeLogicalNameAttribute("knowledgearticleviews_state")]
		public int? KnowledgeArticleViewState
		{
			get
			{
				return GetAttributeValue<int?>("knowledgearticleviews_state");
			}
		}
		
		[AttributeLogicalNameAttribute("languagelocaleid")]
		public EntityReference Language
		{
			get
			{
				return GetAttributeValue<EntityReference>("languagelocaleid");
			}
			set
			{
				SetAttributeValue("languagelocaleid", nameof(Language), value);
			}
		}
		
		[AttributeLogicalNameAttribute("languagelocaleid")]
		[RelationshipSchemaNameAttribute("knowledgearticle_languagelocaleid")]
		public Language Language_Language
		{
			get
			{
				return GetRelatedEntity<Language>("knowledgearticle_languagelocaleid");
			}
			set
			{
				SetRelatedEntity<Language>("knowledgearticle_languagelocaleid", nameof(Language_Language), value);
			}
		}
		
		[AttributeLogicalNameAttribute("majorversionnumber")]
		public int? MajorVersionNumber
		{
			get
			{
				return GetAttributeValue<int?>("majorversionnumber");
			}
			set
			{
				SetAttributeValue("majorversionnumber", nameof(MajorVersionNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("minorversionnumber")]
		public int? MinorVersionNumber
		{
			get
			{
				return GetAttributeValue<int?>("minorversionnumber");
			}
			set
			{
				SetAttributeValue("minorversionnumber", nameof(MinorVersionNumber), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(Owner), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("parentarticlecontentid")]
		public EntityReference ParentArticleContentId
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentarticlecontentid");
			}
			set
			{
				SetAttributeValue("parentarticlecontentid", nameof(ParentArticleContentId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("parentarticlecontentid")]
		[RelationshipSchemaNameAttribute("knowledgearticle_parentarticle_contentid", EntityRole.Referencing)]
		public KnowledgeArticle ParentArticleContentId_KnowledgeArticle
		{
			get
			{
				return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", EntityRole.Referencing);
			}
			set
			{
				SetRelatedEntity<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", nameof(ParentArticleContentId_KnowledgeArticle), value, EntityRole.Referencing);
			}
		}
		
		[RelationshipSchemaNameAttribute("knowledgearticle_parentarticle_contentid", EntityRole.Referenced)]
		public IEnumerable<KnowledgeArticle> ParentArticleContentId_KnowledgeArticles
		{
			get
			{
				return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_parentarticle_contentid", nameof(ParentArticleContentId_KnowledgeArticles), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("previousarticlecontentid")]
		public EntityReference PreviousArticleContentID
		{
			get
			{
				return GetAttributeValue<EntityReference>("previousarticlecontentid");
			}
			set
			{
				SetAttributeValue("previousarticlecontentid", nameof(PreviousArticleContentID), value);
			}
		}
		
		[AttributeLogicalNameAttribute("previousarticlecontentid")]
		[RelationshipSchemaNameAttribute("knowledgearticle_previousarticle_contentid", EntityRole.Referencing)]
		public KnowledgeArticle PreviousArticleContentID_KnowledgeArticle
		{
			get
			{
				return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", EntityRole.Referencing);
			}
			set
			{
				SetRelatedEntity<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", nameof(PreviousArticleContentID_KnowledgeArticle), value, EntityRole.Referencing);
			}
		}
		
		[RelationshipSchemaNameAttribute("knowledgearticle_previousarticle_contentid", EntityRole.Referenced)]
		public IEnumerable<KnowledgeArticle> PreviousArticleContentID_KnowledgeArticles
		{
			get
			{
				return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_previousarticle_contentid", nameof(PreviousArticleContentID_KnowledgeArticles), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("isprimary")]
		public bool? PrimaryArticle
		{
			get
			{
				return GetAttributeValue<bool?>("isprimary");
			}
			set
			{
				SetAttributeValue("isprimary", nameof(PrimaryArticle), value);
			}
		}
		
		[AttributeLogicalNameAttribute("primaryauthorid")]
		public EntityReference PrimaryAuthorId
		{
			get
			{
				return GetAttributeValue<EntityReference>("primaryauthorid");
			}
			set
			{
				SetAttributeValue("primaryauthorid", nameof(PrimaryAuthorId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("processid")]
		public Guid? ProcessId
		{
			get
			{
				return GetAttributeValue<Guid?>("processid");
			}
			set
			{
				SetAttributeValue("processid", nameof(ProcessId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("publishstatusid")]
		public int? PublishedStatus
		{
			get
			{
				return GetAttributeValue<int?>("publishstatusid");
			}
			set
			{
				SetAttributeValue("publishstatusid", nameof(PublishedStatus), value);
			}
		}
		
		[AttributeLogicalNameAttribute("publishon")]
		public DateTime? PublishOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("publishon");
			}
			set
			{
				SetAttributeValue("publishon", nameof(PublishOn), value);
			}
		}
		
		[AttributeLogicalNameAttribute("rating")]
		public decimal? Rating
		{
			get
			{
				return GetAttributeValue<decimal?>("rating");
			}
		}
		
		[AttributeLogicalNameAttribute("rating_count")]
		public int? RatingCount
		{
			get
			{
				return GetAttributeValue<int?>("rating_count");
			}
		}
		
		[AttributeLogicalNameAttribute("rating_date")]
		public DateTime? RatingLastUpdatedTime
		{
			get
			{
				return GetAttributeValue<DateTime?>("rating_date");
			}
		}
		
		[AttributeLogicalNameAttribute("rating_state")]
		public int? RatingState
		{
			get
			{
				return GetAttributeValue<int?>("rating_state");
			}
		}
		
		[AttributeLogicalNameAttribute("rating_sum")]
		public decimal? Ratingsum
		{
			get
			{
				return GetAttributeValue<decimal?>("rating_sum");
			}
		}
		
		[AttributeLogicalNameAttribute("readyforreview")]
		public bool? ReadyForReview
		{
			get
			{
				return GetAttributeValue<bool?>("readyforreview");
			}
			set
			{
				SetAttributeValue("readyforreview", nameof(ReadyForReview), value);
			}
		}
		
		[AttributeLogicalNameAttribute("review")]
		public Enums.Review? Review
		{
			get
			{
				return (Enums.Review?)GetAttributeValue<OptionSetValue>("review")?.Value;
			}
			set
			{
				SetAttributeValue("review", nameof(Review), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("isrootarticle")]
		public bool? RootArticle
		{
			get
			{
				return GetAttributeValue<bool?>("isrootarticle");
			}
			set
			{
				SetAttributeValue("isrootarticle", nameof(RootArticle), value);
			}
		}
		
		[AttributeLogicalNameAttribute("rootarticleid")]
		public EntityReference RootArticleId
		{
			get
			{
				return GetAttributeValue<EntityReference>("rootarticleid");
			}
			set
			{
				SetAttributeValue("rootarticleid", nameof(RootArticleId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("rootarticleid")]
		[RelationshipSchemaNameAttribute("knowledgearticle_rootarticle_id", EntityRole.Referencing)]
		public KnowledgeArticle RootArticleId_KnowledgeArticle
		{
			get
			{
				return GetRelatedEntity<KnowledgeArticle>("knowledgearticle_rootarticle_id", EntityRole.Referencing);
			}
			set
			{
				SetRelatedEntity<KnowledgeArticle>("knowledgearticle_rootarticle_id", nameof(RootArticleId_KnowledgeArticle), value, EntityRole.Referencing);
			}
		}
		
		[RelationshipSchemaNameAttribute("knowledgearticle_rootarticle_id", EntityRole.Referenced)]
		public IEnumerable<KnowledgeArticle> RootArticleId_KnowledgeArticles
		{
			get
			{
				return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_rootarticle_id", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_rootarticle_id", nameof(RootArticleId_KnowledgeArticles), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("scheduledstatusid")]
		public int? ScheduledStatus
		{
			get
			{
				return GetAttributeValue<int?>("scheduledstatusid");
			}
			set
			{
				SetAttributeValue("scheduledstatusid", nameof(ScheduledStatus), value);
			}
		}
		
		[AttributeLogicalNameAttribute("setcategoryassociations")]
		public bool? SetCategoryAssociations
		{
			get
			{
				return GetAttributeValue<bool?>("setcategoryassociations");
			}
			set
			{
				SetAttributeValue("setcategoryassociations", nameof(SetCategoryAssociations), value);
			}
		}
		
		[AttributeLogicalNameAttribute("stageid")]
		public Guid? StageId
		{
			get
			{
				return GetAttributeValue<Guid?>("stageid");
			}
			set
			{
				SetAttributeValue("stageid", nameof(StageId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("statecode")]
		public Enums.Status? Status
		{
			get
			{
				return (Enums.Status?)GetAttributeValue<OptionSetValue>("statecode")?.Value;
			}
			set
			{
				SetAttributeValue("statecode", nameof(Status), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("statuscode")]
		public Enums.StatusReason? StatusReason
		{
			get
			{
				return (Enums.StatusReason?)GetAttributeValue<OptionSetValue>("statuscode")?.Value;
			}
			set
			{
				SetAttributeValue("statuscode", nameof(StatusReason), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("subjectid")]
		public EntityReference Subject
		{
			get
			{
				return GetAttributeValue<EntityReference>("subjectid");
			}
			set
			{
				SetAttributeValue("subjectid", nameof(Subject), value);
			}
		}
		
		[AttributeLogicalNameAttribute("title")]
		public string Title
		{
			get
			{
				return GetAttributeValue<string>("title");
			}
			set
			{
				SetAttributeValue("title", nameof(Title), value);
			}
		}
		
		[AttributeLogicalNameAttribute("updatecontent")]
		public bool? UpdateContent
		{
			get
			{
				return GetAttributeValue<bool?>("updatecontent");
			}
			set
			{
				SetAttributeValue("updatecontent", nameof(UpdateContent), value);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum StatusReason
			{
				
				[AmbientValue(Status.Approved)]
				[Description("Approved")]
				[EnumMember()]
				Approved = 5,
				
				[AmbientValue(Status.Archived)]
				[Description("Archived")]
				[EnumMember()]
				Archived = 12,
				
				[AmbientValue(Status.Discarded)]
				[Description("Discarded")]
				[EnumMember()]
				Discarded = 13,
				
				[AmbientValue(Status.Draft)]
				[Description("Draft")]
				[EnumMember()]
				Draft = 2,
				
				[AmbientValue(Status.Expired)]
				[Description("Expired")]
				[EnumMember()]
				Expired = 10,
				
				[AmbientValue(Status.Draft)]
				[Description("In review")]
				[EnumMember()]
				InReview = 4,
				
				[AmbientValue(Status.Draft)]
				[Description("Needs review")]
				[EnumMember()]
				NeedsReview = 3,
				
				[AmbientValue(Status.Published)]
				[Description("Needs review")]
				[EnumMember()]
				NeedsReview2 = 8,
				
				[AmbientValue(Status.Draft)]
				[Description("Proposed")]
				[EnumMember()]
				Proposed = 1,
				
				[AmbientValue(Status.Published)]
				[Description("Published")]
				[EnumMember()]
				Published = 7,
				
				[AmbientValue(Status.Expired)]
				[Description("Rejected")]
				[EnumMember()]
				Rejected = 11,
				
				[AmbientValue(Status.Discarded)]
				[Description("Rejected")]
				[EnumMember()]
				Rejected2 = 14,
				
				[AmbientValue(Status.Scheduled)]
				[Description("Scheduled")]
				[EnumMember()]
				Scheduled = 6,
				
				[AmbientValue(Status.Published)]
				[Description("Updating")]
				[EnumMember()]
				Updating = 9,
			}
			
			[DataContract()]
			public enum Status
			{
				
				[Description("Approved")]
				[EnumMember()]
				Approved = 1,
				
				[Description("Archived")]
				[EnumMember()]
				Archived = 5,
				
				[Description("Discarded")]
				[EnumMember()]
				Discarded = 6,
				
				[Description("Draft")]
				[EnumMember()]
				Draft = 0,
				
				[Description("Expired")]
				[EnumMember()]
				Expired = 4,
				
				[Description("Published")]
				[EnumMember()]
				Published = 3,
				
				[Description("Scheduled")]
				[EnumMember()]
				Scheduled = 2,
			}
			
			[DataContract()]
			public enum Review
			{
				
				[Description("Approved")]
				[EnumMember()]
				Approved = 0,
				
				[Description("Rejected")]
				[EnumMember()]
				Rejected = 1,
			}
			
			[DataContract()]
			public enum ExpiredReviewOptions
			{
				
				[Description("Archive")]
				[EnumMember()]
				Archive = 2,
				
				[Description("Needs Updating")]
				[EnumMember()]
				NeedsUpdating = 0,
				
				[Description("Republish")]
				[EnumMember()]
				Republish = 1,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string ArticlePublicNumber = "articlepublicnumber";
			
			public const string Content = "content";
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string DeprecatedTraversedPath = "traversedpath";
			
			public const string Description = "description";
			
			public const string ExchangeRate = "exchangerate";
			
			public const string ExpirationDate = "expirationdate";
			
			public const string ExpirationStateId = "expirationstateid";
			
			public const string ExpiredReviewOptions = "expiredreviewoptions";
			
			public const string ExpiredStatus = "expirationstatusid";
			
			public const string Id = "knowledgearticleid";
			
			public const string IngestedArticleURL = "msdyn_ingestedarticleurl";
			
			public const string Internal = "isinternal";
			
			public const string IsIngestedArticle = "msdyn_isingestedarticle";
			
			public const string IsLatestVersion = "islatestversion";
			
			public const string Keywords = "keywords";
			
			public const string KnowledgeArticleViewLastUpdatedTime = "knowledgearticleviews_date";
			
			public const string KnowledgeArticleViews = "knowledgearticleviews";
			
			public const string KnowledgeArticleViewState = "knowledgearticleviews_state";
			
			public const string Language = "languagelocaleid";
			
			public const string MajorVersionNumber = "majorversionnumber";
			
			public const string MinorVersionNumber = "minorversionnumber";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningTeam = "owningteam";
			
			public const string OwningUser = "owninguser";
			
			public const string ParentArticleContentId = "parentarticlecontentid";
			
			public const string PreviousArticleContentID = "previousarticlecontentid";
			
			public const string PrimaryArticle = "isprimary";
			
			public const string PrimaryAuthorId = "primaryauthorid";
			
			public const string ProcessId = "processid";
			
			public const string PublishedStatus = "publishstatusid";
			
			public const string PublishOn = "publishon";
			
			public const string Rating = "rating";
			
			public const string RatingCount = "rating_count";
			
			public const string RatingLastUpdatedTime = "rating_date";
			
			public const string RatingState = "rating_state";
			
			public const string Ratingsum = "rating_sum";
			
			public const string ReadyForReview = "readyforreview";
			
			public const string Review = "review";
			
			public const string RootArticle = "isrootarticle";
			
			public const string RootArticleId = "rootarticleid";
			
			public const string ScheduledStatus = "scheduledstatusid";
			
			public const string SetCategoryAssociations = "setcategoryassociations";
			
			public const string StageId = "stageid";
			
			public const string Status = "statecode";
			
			public const string StatusReason = "statuscode";
			
			public const string Subject = "subjectid";
			
			public const string Title = "title";
			
			public const string UpdateContent = "updatecontent";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Categories = "knowledgearticle_category";
			
			public const string Language_Language = "knowledgearticle_languagelocaleid";
			
			public const string ParentArticleContentId_KnowledgeArticle = "knowledgearticle_parentarticle_contentid";
			
			public const string ParentArticleContentId_KnowledgeArticles = "knowledgearticle_parentarticle_contentid";
			
			public const string PreviousArticleContentID_KnowledgeArticle = "knowledgearticle_previousarticle_contentid";
			
			public const string PreviousArticleContentID_KnowledgeArticles = "knowledgearticle_previousarticle_contentid";
			
			public const string RootArticleId_KnowledgeArticle = "knowledgearticle_rootarticle_id";
			
			public const string RootArticleId_KnowledgeArticles = "knowledgearticle_rootarticle_id";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("knowledgearticlescategories")]
	[ExcludeFromCodeCoverage()]
	public partial class KnowledgeArticleCategory : EarlyEntity
	{
		
		public KnowledgeArticleCategory() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("categoryid")]
		public Guid? CategoryId
		{
			get
			{
				return GetAttributeValue<Guid?>("categoryid");
			}
		}
		
		public const string EntityLogicalCollectionName = null;
		
		public const string EntityLogicalName = "knowledgearticlescategories";
		
		public const string EntitySetName = "KnowledgeArticleCategories";
		
		[AttributeLogicalNameAttribute("knowledgearticlecategoryid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("knowledgearticlecategoryid");
			}
			set
			{
				SetAttributeValue("knowledgearticlecategoryid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("knowledgearticleid")]
		public Guid? KnowledgeArticleId
		{
			get
			{
				return GetAttributeValue<Guid?>("knowledgearticleid");
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string CategoryId = "categoryid";
			
			public const string Id = "knowledgearticlecategoryid";
			
			public const string KnowledgeArticleId = "knowledgearticleid";
		}
		
		[DataContract()]
		public struct Relationships
		{
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("languagelocale")]
	[ExcludeFromCodeCoverage()]
	public partial class Language : EarlyEntity
	{
		
		public Language() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("code")]
		public string Code
		{
			get
			{
				return GetAttributeValue<string>("code");
			}
		}
		
		public const string EntityLogicalCollectionName = "languagelocales";
		
		public const string EntityLogicalName = "languagelocale";
		
		public const string EntitySetName = "languagelocale";
		
		[AttributeLogicalNameAttribute("languagelocaleid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("languagelocaleid");
			}
			set
			{
				SetAttributeValue("languagelocaleid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[RelationshipSchemaNameAttribute("knowledgearticle_languagelocaleid")]
		public IEnumerable<KnowledgeArticle> Language_KnowledgeArticles
		{
			get
			{
				return GetRelatedEntities<KnowledgeArticle>("knowledgearticle_languagelocaleid");
			}
			set
			{
				SetRelatedEntities<KnowledgeArticle>("knowledgearticle_languagelocaleid", nameof(Language_KnowledgeArticles), value);
			}
		}
		
		[AttributeLogicalNameAttribute("language")]
		public string Language2
		{
			get
			{
				return GetAttributeValue<string>("language");
			}
		}
		
		[AttributeLogicalNameAttribute("statuscode")]
		public Enums.Status2? LanguageStatusCode
		{
			get
			{
				return (Enums.Status2?)GetAttributeValue<OptionSetValue>("statuscode")?.Value;
			}
			set
			{
				SetAttributeValue("statuscode", nameof(LanguageStatusCode), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("localeid")]
		public int? LocaleID
		{
			get
			{
				return GetAttributeValue<int?>("localeid");
			}
			set
			{
				SetAttributeValue("localeid", nameof(LocaleID), value);
			}
		}
		
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return GetAttributeValue<string>("name");
			}
		}
		
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference Organization
		{
			get
			{
				return GetAttributeValue<EntityReference>("organizationid");
			}
		}
		
		[AttributeLogicalNameAttribute("region")]
		public string Region
		{
			get
			{
				return GetAttributeValue<string>("region");
			}
		}
		
		[AttributeLogicalNameAttribute("statecode")]
		public Enums.Status? StateCode
		{
			get
			{
				return (Enums.Status?)GetAttributeValue<OptionSetValue>("statecode")?.Value;
			}
			set
			{
				SetAttributeValue("statecode", nameof(StateCode), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum Status2
			{
				
				[AmbientValue(Status.Active)]
				[Description("Active")]
				[EnumMember()]
				Active = 1,
				
				[AmbientValue(Status.Inactive)]
				[Description("Inactive")]
				[EnumMember()]
				Inactive = 2,
			}
			
			[DataContract()]
			public enum Status
			{
				
				[Description("Active")]
				[EnumMember()]
				Active = 0,
				
				[Description("Inactive")]
				[EnumMember()]
				Inactive = 1,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string Code = "code";
			
			public const string Id = "languagelocaleid";
			
			public const string Language2 = "language";
			
			public const string LanguageStatusCode = "statuscode";
			
			public const string LocaleID = "localeid";
			
			public const string Name = "name";
			
			public const string Organization = "organizationid";
			
			public const string Region = "region";
			
			public const string StateCode = "statecode";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Language_KnowledgeArticles = "knowledgearticle_languagelocaleid";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("privilege")]
	[ExcludeFromCodeCoverage()]
	public partial class Privilege : EarlyEntity
	{
		
		public Privilege() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("accessright")]
		public int? AccessRight
		{
			get
			{
				return GetAttributeValue<int?>("accessright");
			}
			set
			{
				SetAttributeValue("accessright", nameof(AccessRight), value);
			}
		}
		
		[AttributeLogicalNameAttribute("privilegerowid")]
		public Guid? AppModuleUniqueId
		{
			get
			{
				return GetAttributeValue<Guid?>("privilegerowid");
			}
			set
			{
				SetAttributeValue("privilegerowid", nameof(AppModuleUniqueId), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbebasic")]
		public bool? CanBeBasic
		{
			get
			{
				return GetAttributeValue<bool?>("canbebasic");
			}
			set
			{
				SetAttributeValue("canbebasic", nameof(CanBeBasic), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbedeep")]
		public bool? CanBeDeep
		{
			get
			{
				return GetAttributeValue<bool?>("canbedeep");
			}
			set
			{
				SetAttributeValue("canbedeep", nameof(CanBeDeep), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbeentityreference")]
		public bool? CanBeEntityReference
		{
			get
			{
				return GetAttributeValue<bool?>("canbeentityreference");
			}
			set
			{
				SetAttributeValue("canbeentityreference", nameof(CanBeEntityReference), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbeglobal")]
		public bool? CanBeGlobal
		{
			get
			{
				return GetAttributeValue<bool?>("canbeglobal");
			}
			set
			{
				SetAttributeValue("canbeglobal", nameof(CanBeGlobal), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbelocal")]
		public bool? CanBeLocal
		{
			get
			{
				return GetAttributeValue<bool?>("canbelocal");
			}
			set
			{
				SetAttributeValue("canbelocal", nameof(CanBeLocal), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbeparententityreference")]
		public bool? CanBeParentEntityReference
		{
			get
			{
				return GetAttributeValue<bool?>("canbeparententityreference");
			}
			set
			{
				SetAttributeValue("canbeparententityreference", nameof(CanBeParentEntityReference), value);
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		public const string EntityLogicalCollectionName = "privileges";
		
		public const string EntityLogicalName = "privilege";
		
		public const string EntitySetName = "privileges";
		
		[AttributeLogicalNameAttribute("privilegeid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("privilegeid");
			}
			set
			{
				SetAttributeValue("privilegeid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return GetAttributeValue<string>("introducedversion");
			}
			set
			{
				SetAttributeValue("introducedversion", nameof(IntroducedVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return GetAttributeValue<string>("name");
			}
			set
			{
				SetAttributeValue("name", nameof(Name), value);
			}
		}
		
		[AttributeProvider(typeof(RolePrivileges))]
		[RelationshipSchemaNameAttribute("roleprivileges_association")]
		public IEnumerable<SecurityRole> SecurityRoles
		{
			get
			{
				return GetRelatedEntities<SecurityRole>("roleprivileges_association");
			}
			set
			{
				SetRelatedEntities<SecurityRole>("roleprivileges_association", nameof(SecurityRoles), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? State
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string AccessRight = "accessright";
			
			public const string AppModuleUniqueId = "privilegerowid";
			
			public const string CanBeBasic = "canbebasic";
			
			public const string CanBeDeep = "canbedeep";
			
			public const string CanBeEntityReference = "canbeentityreference";
			
			public const string CanBeGlobal = "canbeglobal";
			
			public const string CanBeLocal = "canbelocal";
			
			public const string CanBeParentEntityReference = "canbeparententityreference";
			
			public const string ComponentState = "componentstate";
			
			public const string Id = "privilegeid";
			
			public const string IntroducedVersion = "introducedversion";
			
			public const string Name = "name";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
			
			public const string State = "ismanaged";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string SecurityRoles = "roleprivileges_association";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("report")]
	[ExcludeFromCodeCoverage()]
	public partial class Report : EarlyEntity
	{
		
		public Report() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("bodybinary")]
		public string BodyBinary
		{
			get
			{
				return GetAttributeValue<string>("bodybinary");
			}
			set
			{
				SetAttributeValue("bodybinary", nameof(BodyBinary), value);
			}
		}
		
		[AttributeLogicalNameAttribute("bodytext")]
		public string BodyText
		{
			get
			{
				return GetAttributeValue<string>("bodytext");
			}
			set
			{
				SetAttributeValue("bodytext", nameof(BodyText), value);
			}
		}
		
		[AttributeLogicalNameAttribute("originalbodytext")]
		public string BodyText2
		{
			get
			{
				return GetAttributeValue<string>("originalbodytext");
			}
		}
		
		[AttributeLogicalNameAttribute("rdlhash")]
		public int? BodyTextHash
		{
			get
			{
				return GetAttributeValue<int?>("rdlhash");
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("createdinmajorversion")]
		public int? CrmVersionInWhichTheReportIsCreated
		{
			get
			{
				return GetAttributeValue<int?>("createdinmajorversion");
			}
			set
			{
				SetAttributeValue("createdinmajorversion", nameof(CrmVersionInWhichTheReportIsCreated), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		[AttributeLogicalNameAttribute("customreportxml")]
		public string CustomReportXML
		{
			get
			{
				return GetAttributeValue<string>("customreportxml");
			}
		}
		
		[AttributeLogicalNameAttribute("defaultfilter")]
		public string DefaultFilter
		{
			get
			{
				return GetAttributeValue<string>("defaultfilter");
			}
			set
			{
				SetAttributeValue("defaultfilter", nameof(DefaultFilter), value);
			}
		}
		
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return GetAttributeValue<string>("description");
			}
			set
			{
				SetAttributeValue("description", nameof(Description), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reports";
		
		public const string EntityLogicalName = "report";
		
		public const string EntitySetName = "reports";
		
		[AttributeLogicalNameAttribute("filename")]
		public string FileName
		{
			get
			{
				return GetAttributeValue<string>("filename");
			}
			set
			{
				SetAttributeValue("filename", nameof(FileName), value);
			}
		}
		
		[AttributeLogicalNameAttribute("filesize")]
		public int? FileSizeBytes
		{
			get
			{
				return GetAttributeValue<int?>("filesize");
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return GetAttributeValue<string>("introducedversion");
			}
			set
			{
				SetAttributeValue("introducedversion", nameof(IntroducedVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomreport")]
		public bool? IsCustomReport
		{
			get
			{
				return GetAttributeValue<bool?>("iscustomreport");
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[AttributeLogicalNameAttribute("isscheduledreport")]
		public bool? IsScheduledReport
		{
			get
			{
				return GetAttributeValue<bool?>("isscheduledreport");
			}
		}
		
		[AttributeLogicalNameAttribute("languagecode")]
		public int? Language
		{
			get
			{
				return GetAttributeValue<int?>("languagecode");
			}
			set
			{
				SetAttributeValue("languagecode", nameof(Language), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportlink_sub")]
		public IEnumerable<ReportLink> LinkedReport_ReportLinks
		{
			get
			{
				return GetRelatedEntities<ReportLink>("report_reportlink_sub");
			}
			set
			{
				SetRelatedEntities<ReportLink>("report_reportlink_sub", nameof(LinkedReport_ReportLinks), value);
			}
		}
		
		[AttributeLogicalNameAttribute("bodyurl")]
		public string LinkedReportURL
		{
			get
			{
				return GetAttributeValue<string>("bodyurl");
			}
			set
			{
				SetAttributeValue("bodyurl", nameof(LinkedReportURL), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportlink")]
		public IEnumerable<ReportLink> MainReport_ReportLinks
		{
			get
			{
				return GetRelatedEntities<ReportLink>("report_reportlink");
			}
			set
			{
				SetRelatedEntities<ReportLink>("report_reportlink", nameof(MainReport_ReportLinks), value);
			}
		}
		
		[AttributeLogicalNameAttribute("mimetype")]
		public string MimeType
		{
			get
			{
				return GetAttributeValue<string>("mimetype");
			}
			set
			{
				SetAttributeValue("mimetype", nameof(MimeType), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return GetAttributeValue<string>("name");
			}
			set
			{
				SetAttributeValue("name", nameof(Name), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportnameonsrs")]
		public string NameOnSRS
		{
			get
			{
				return GetAttributeValue<string>("reportnameonsrs");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				SetAttributeValue("ownerid", nameof(Owner), value);
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("parentreportid")]
		public EntityReference ParentReport
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentreportid");
			}
			set
			{
				SetAttributeValue("parentreportid", nameof(ParentReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("parentreportid")]
		[RelationshipSchemaNameAttribute("report_parent_report", EntityRole.Referencing)]
		public Report ParentReport_Report
		{
			get
			{
				return GetRelatedEntity<Report>("report_parent_report", EntityRole.Referencing);
			}
			set
			{
				SetRelatedEntity<Report>("report_parent_report", nameof(ParentReport_Report), value, EntityRole.Referencing);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_parent_report", EntityRole.Referenced)]
		public IEnumerable<Report> ParentReport_Reports
		{
			get
			{
				return GetRelatedEntities<Report>("report_parent_report", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<Report>("report_parent_report", nameof(ParentReport_Reports), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("queryinfo")]
		public string QueryInfoStructure
		{
			get
			{
				return GetAttributeValue<string>("queryinfo");
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportcategories")]
		public IEnumerable<ReportRelatedCategory> Report_ReportRelatedCategories
		{
			get
			{
				return GetRelatedEntities<ReportRelatedCategory>("report_reportcategories");
			}
			set
			{
				SetRelatedEntities<ReportRelatedCategory>("report_reportcategories", nameof(Report_ReportRelatedCategories), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportentities")]
		public IEnumerable<ReportRelatedEntity> Report_ReportRelatedEntities
		{
			get
			{
				return GetRelatedEntities<ReportRelatedEntity>("report_reportentities");
			}
			set
			{
				SetRelatedEntities<ReportRelatedEntity>("report_reportentities", nameof(Report_ReportRelatedEntities), value);
			}
		}
		
		[RelationshipSchemaNameAttribute("report_reportvisibility")]
		public IEnumerable<ReportVisibility> Report_ReportVisibilities
		{
			get
			{
				return GetRelatedEntities<ReportVisibility>("report_reportvisibility");
			}
			set
			{
				SetRelatedEntities<ReportVisibility>("report_reportvisibility", nameof(Report_ReportVisibilities), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportidunique")]
		public Guid? Report3
		{
			get
			{
				return GetAttributeValue<Guid?>("reportidunique");
			}
		}
		
		[AttributeLogicalNameAttribute("signaturedate")]
		public DateTime? ReportSignatureDate
		{
			get
			{
				return GetAttributeValue<DateTime?>("signaturedate");
			}
			set
			{
				SetAttributeValue("signaturedate", nameof(ReportSignatureDate), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signaturemajorversion")]
		public int? ReportSignatureMajorVersion
		{
			get
			{
				return GetAttributeValue<int?>("signaturemajorversion");
			}
			set
			{
				SetAttributeValue("signaturemajorversion", nameof(ReportSignatureMajorVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signatureminorversion")]
		public int? ReportSignatureMinorVersion
		{
			get
			{
				return GetAttributeValue<int?>("signatureminorversion");
			}
			set
			{
				SetAttributeValue("signatureminorversion", nameof(ReportSignatureMinorVersion), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reporttypecode")]
		public Enums.ReportType? ReportType
		{
			get
			{
				return (Enums.ReportType?)GetAttributeValue<OptionSetValue>("reporttypecode")?.Value;
			}
			set
			{
				SetAttributeValue("reporttypecode", nameof(ReportType), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("schedulexml")]
		public string ScheduleDefinitionXML
		{
			get
			{
				return GetAttributeValue<string>("schedulexml");
			}
		}
		
		[AttributeLogicalNameAttribute("signatureid")]
		public Guid? Signature
		{
			get
			{
				return GetAttributeValue<Guid?>("signatureid");
			}
			set
			{
				SetAttributeValue("signatureid", nameof(Signature), value);
			}
		}
		
		[AttributeLogicalNameAttribute("signaturelcid")]
		public int? SignatureLanguageCode
		{
			get
			{
				return GetAttributeValue<int?>("signaturelcid");
			}
			set
			{
				SetAttributeValue("signaturelcid", nameof(SignatureLanguageCode), value);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("ispersonal")]
		public bool? ViewableBy
		{
			get
			{
				return GetAttributeValue<bool?>("ispersonal");
			}
			set
			{
				SetAttributeValue("ispersonal", nameof(ViewableBy), value);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum ReportType
			{
				
				[Description("Linked Report")]
				[EnumMember()]
				LinkedReport = 3,
				
				[Description("Other Report")]
				[EnumMember()]
				OtherReport = 2,
				
				[Description("Reporting Services Report")]
				[EnumMember()]
				ReportingServicesReport = 1,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string BodyBinary = "bodybinary";
			
			public const string BodyText = "bodytext";
			
			public const string BodyText2 = "originalbodytext";
			
			public const string BodyTextHash = "rdlhash";
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string CrmVersionInWhichTheReportIsCreated = "createdinmajorversion";
			
			public const string Customizable = "iscustomizable";
			
			public const string CustomReportXML = "customreportxml";
			
			public const string DefaultFilter = "defaultfilter";
			
			public const string Description = "description";
			
			public const string FileName = "filename";
			
			public const string FileSizeBytes = "filesize";
			
			public const string Id = "reportid";
			
			public const string IntroducedVersion = "introducedversion";
			
			public const string IsCustomReport = "iscustomreport";
			
			public const string IsManaged = "ismanaged";
			
			public const string IsScheduledReport = "isscheduledreport";
			
			public const string Language = "languagecode";
			
			public const string LinkedReportURL = "bodyurl";
			
			public const string MimeType = "mimetype";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Name = "name";
			
			public const string NameOnSRS = "reportnameonsrs";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningTeam = "owningteam";
			
			public const string OwningUser = "owninguser";
			
			public const string ParentReport = "parentreportid";
			
			public const string QueryInfoStructure = "queryinfo";
			
			public const string Report3 = "reportidunique";
			
			public const string ReportSignatureDate = "signaturedate";
			
			public const string ReportSignatureMajorVersion = "signaturemajorversion";
			
			public const string ReportSignatureMinorVersion = "signatureminorversion";
			
			public const string ReportType = "reporttypecode";
			
			public const string ScheduleDefinitionXML = "schedulexml";
			
			public const string Signature = "signatureid";
			
			public const string SignatureLanguageCode = "signaturelcid";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
			
			public const string ViewableBy = "ispersonal";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string LinkedReport_ReportLinks = "report_reportlink_sub";
			
			public const string MainReport_ReportLinks = "report_reportlink";
			
			public const string ParentReport_Report = "report_parent_report";
			
			public const string ParentReport_Reports = "report_parent_report";
			
			public const string Report_ReportRelatedCategories = "report_reportcategories";
			
			public const string Report_ReportRelatedEntities = "report_reportentities";
			
			public const string Report_ReportVisibilities = "report_reportvisibility";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportlink")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportLink : EarlyEntity
	{
		
		public ReportLink() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		public const string EntityLogicalCollectionName = "reportlinks";
		
		public const string EntityLogicalName = "reportlink";
		
		public const string EntitySetName = "reportlinks";
		
		[AttributeLogicalNameAttribute("reportlinkid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportlinkid");
			}
			set
			{
				SetAttributeValue("reportlinkid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("linkedreportid")]
		public EntityReference LinkedReport
		{
			get
			{
				return GetAttributeValue<EntityReference>("linkedreportid");
			}
			set
			{
				SetAttributeValue("linkedreportid", nameof(LinkedReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("linkedreportid")]
		[RelationshipSchemaNameAttribute("report_reportlink_sub")]
		public Report LinkedReport_Report
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportlink_sub");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportlink_sub", nameof(LinkedReport_Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("linkedreportname")]
		public string LinkedReportName
		{
			get
			{
				return GetAttributeValue<string>("linkedreportname");
			}
			set
			{
				SetAttributeValue("linkedreportname", nameof(LinkedReportName), value);
			}
		}
		
		[AttributeLogicalNameAttribute("linktypecode")]
		public Enums.LinkType? LinkType
		{
			get
			{
				return (Enums.LinkType?)GetAttributeValue<OptionSetValue>("linktypecode")?.Value;
			}
			set
			{
				SetAttributeValue("linktypecode", nameof(LinkType), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference MainReport
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(MainReport), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportlink")]
		public Report MainReport_Report
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportlink");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportlink", nameof(MainReport_Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("reportlinkidunique")]
		public Guid? ReportLinkIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportlinkidunique");
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum LinkType
			{
				
				[Description("Drill-through")]
				[EnumMember()]
				Drillthrough = 1,
				
				[Description("Drill-through and sub-report")]
				[EnumMember()]
				DrillThroughAndSubReport = 3,
				
				[Description("Sub-report")]
				[EnumMember()]
				Subreport = 2,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Id = "reportlinkid";
			
			public const string LinkedReport = "linkedreportid";
			
			public const string LinkedReportName = "linkedreportname";
			
			public const string LinkType = "linktypecode";
			
			public const string MainReport = "reportid";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string ReportLinkIdUnique = "reportlinkidunique";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string LinkedReport_Report = "report_reportlink_sub";
			
			public const string MainReport_Report = "report_reportlink";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportcategory")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportRelatedCategory : EarlyEntity
	{
		
		public ReportRelatedCategory() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("categorycode")]
		public Enums.Category? Category
		{
			get
			{
				return (Enums.Category?)GetAttributeValue<OptionSetValue>("categorycode")?.Value;
			}
			set
			{
				SetAttributeValue("categorycode", nameof(Category), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportcategories";
		
		public const string EntityLogicalName = "reportcategory";
		
		public const string EntitySetName = "reportcategories";
		
		[AttributeLogicalNameAttribute("exchangerate")]
		public decimal? ExchangeRate
		{
			get
			{
				return GetAttributeValue<decimal?>("exchangerate");
			}
		}
		
		[AttributeLogicalNameAttribute("reportcategoryid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportcategoryid");
			}
			set
			{
				SetAttributeValue("reportcategoryid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference Report
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportcategories")]
		public Report Report_Report
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportcategories");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportcategories", nameof(Report_Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportcategoryidunique")]
		public Guid? ReportCategory2
		{
			get
			{
				return GetAttributeValue<Guid?>("reportcategoryidunique");
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum Category
			{
				
				[Description("Administrative Reports")]
				[EnumMember()]
				AdministrativeReports = 4,
				
				[Description("Marketing Reports")]
				[EnumMember()]
				MarketingReports = 3,
				
				[Description("Sales Reports")]
				[EnumMember()]
				SalesReports = 1,
				
				[Description("Service Reports")]
				[EnumMember()]
				ServiceReports = 2,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string Category = "categorycode";
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Customizable = "iscustomizable";
			
			public const string ExchangeRate = "exchangerate";
			
			public const string Id = "reportcategoryid";
			
			public const string IsManaged = "ismanaged";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string Report = "reportid";
			
			public const string ReportCategory2 = "reportcategoryidunique";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Report_Report = "report_reportcategories";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportentity")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportRelatedEntity : EarlyEntity
	{
		
		public ReportRelatedEntity() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportentities";
		
		public const string EntityLogicalName = "reportentity";
		
		public const string EntitySetName = "reportentities";
		
		[AttributeLogicalNameAttribute("isfilterable")]
		public bool? Filterable
		{
			get
			{
				return GetAttributeValue<bool?>("isfilterable");
			}
			set
			{
				SetAttributeValue("isfilterable", nameof(Filterable), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportentityid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportentityid");
			}
			set
			{
				SetAttributeValue("reportentityid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference Report
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportentities")]
		public Report Report_Report
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportentities");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportentities", nameof(Report_Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportentityidunique")]
		public Guid? ReportEntityIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportentityidunique");
			}
		}
		
		[AttributeLogicalNameAttribute("objecttypecode")]
		public Enums.ReportRelatedEntity? ReportRelatedEntity2
		{
			get
			{
				return (Enums.ReportRelatedEntity?)GetAttributeValue<OptionSetValue>("objecttypecode")?.Value;
			}
			set
			{
				SetAttributeValue("objecttypecode", nameof(ReportRelatedEntity2), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			public enum ReportRelatedEntity
			{
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Customizable = "iscustomizable";
			
			public const string Filterable = "isfilterable";
			
			public const string Id = "reportentityid";
			
			public const string IsManaged = "ismanaged";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string Report = "reportid";
			
			public const string ReportEntityIdUnique = "reportentityidunique";
			
			public const string ReportRelatedEntity2 = "objecttypecode";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Report_Report = "report_reportentities";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("reportvisibility")]
	[ExcludeFromCodeCoverage()]
	public partial class ReportVisibility : EarlyEntity
	{
		
		public ReportVisibility() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "reportvisibilities";
		
		public const string EntityLogicalName = "reportvisibility";
		
		public const string EntitySetName = "reportvisibilities";
		
		[AttributeLogicalNameAttribute("reportvisibilityid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("reportvisibilityid");
			}
			set
			{
				SetAttributeValue("reportvisibilityid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return GetAttributeValue<EntityReference>("ownerid");
			}
		}
		
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				return GetAttributeValue<Guid?>("owningbusinessunit");
			}
		}
		
		[AttributeLogicalNameAttribute("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				return GetAttributeValue<Guid?>("owninguser");
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		public EntityReference Report
		{
			get
			{
				return GetAttributeValue<EntityReference>("reportid");
			}
			set
			{
				SetAttributeValue("reportid", nameof(Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportid")]
		[RelationshipSchemaNameAttribute("report_reportvisibility")]
		public Report Report_Report
		{
			get
			{
				return GetRelatedEntity<Report>("report_reportvisibility");
			}
			set
			{
				SetRelatedEntity<Report>("report_reportvisibility", nameof(Report_Report), value);
			}
		}
		
		[AttributeLogicalNameAttribute("reportvisibilityidunique")]
		public Guid? ReportVisibilityIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("reportvisibilityidunique");
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("visibilitycode")]
		public Enums.Visibility? Visibility
		{
			get
			{
				return (Enums.Visibility?)GetAttributeValue<OptionSetValue>("visibilitycode")?.Value;
			}
			set
			{
				SetAttributeValue("visibilitycode", nameof(Visibility), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[DataContract()]
		public struct Enums
		{
			
			[DataContract()]
			public enum Visibility
			{
				
				[Description("Forms for related record types")]
				[EnumMember()]
				FormsForRelatedRecordTypes = 2,
				
				[Description("Lists for related record types")]
				[EnumMember()]
				ListsForRelatedRecordTypes = 3,
				
				[Description("Reports area")]
				[EnumMember()]
				ReportsArea = 1,
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Customizable = "iscustomizable";
			
			public const string Id = "reportvisibilityid";
			
			public const string IsManaged = "ismanaged";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Owner = "ownerid";
			
			public const string OwningBusinessUnit = "owningbusinessunit";
			
			public const string OwningUser = "owninguser";
			
			public const string Report = "reportid";
			
			public const string ReportVisibilityIdUnique = "reportvisibilityidunique";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
			
			public const string Visibility = "visibilitycode";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string Report_Report = "report_reportvisibility";
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("roleprivileges")]
	[ExcludeFromCodeCoverage()]
	public partial class RolePrivileges : EarlyEntity
	{
		
		public RolePrivileges() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("canbedeleted")]
		public BooleanManagedProperty CanBeDeleted
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("canbedeleted");
			}
			set
			{
				SetAttributeValue("canbedeleted", nameof(CanBeDeleted), value);
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		public const string EntityLogicalCollectionName = null;
		
		public const string EntityLogicalName = "roleprivileges";
		
		public const string EntitySetName = "roleprivilegescollection";
		
		[AttributeLogicalNameAttribute("roleprivilegeid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("roleprivilegeid");
			}
			set
			{
				SetAttributeValue("roleprivilegeid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? IsManaged
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[AttributeLogicalNameAttribute("privilegedepthmask")]
		public int? PrivilegeDepthMask
		{
			get
			{
				return GetAttributeValue<int?>("privilegedepthmask");
			}
			set
			{
				SetAttributeValue("privilegedepthmask", nameof(PrivilegeDepthMask), value);
			}
		}
		
		[AttributeLogicalNameAttribute("privilegeid")]
		public Guid? PrivilegeId
		{
			get
			{
				return GetAttributeValue<Guid?>("privilegeid");
			}
		}
		
		[AttributeLogicalNameAttribute("roleid")]
		public Guid? RoleId
		{
			get
			{
				return GetAttributeValue<Guid?>("roleid");
			}
		}
		
		[AttributeLogicalNameAttribute("roleprivilegeidunique")]
		public Guid? RolePrivilegeIdUnique
		{
			get
			{
				return GetAttributeValue<Guid?>("roleprivilegeidunique");
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string CanBeDeleted = "canbedeleted";
			
			public const string ComponentState = "componentstate";
			
			public const string Id = "roleprivilegeid";
			
			public const string IsManaged = "ismanaged";
			
			public const string PrivilegeDepthMask = "privilegedepthmask";
			
			public const string PrivilegeId = "privilegeid";
			
			public const string RoleId = "roleid";
			
			public const string RolePrivilegeIdUnique = "roleprivilegeidunique";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
		}
		
		[DataContract()]
		public struct Relationships
		{
		}
	}
	
	[DataContract()]
	[EntityLogicalNameAttribute("role")]
	[ExcludeFromCodeCoverage()]
	public partial class SecurityRole : EarlyEntity
	{
		
		public SecurityRole() : 
				base(EntityLogicalName)
		{
		}
		
		[AttributeLogicalNameAttribute("businessunitid")]
		public EntityReference BusinessUnit
		{
			get
			{
				return GetAttributeValue<EntityReference>("businessunitid");
			}
			set
			{
				SetAttributeValue("businessunitid", nameof(BusinessUnit), value);
			}
		}
		
		[AttributeLogicalNameAttribute("canbedeleted")]
		public BooleanManagedProperty CanBeDeleted
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("canbedeleted");
			}
			set
			{
				SetAttributeValue("canbedeleted", nameof(CanBeDeleted), value);
			}
		}
		
		[AttributeLogicalNameAttribute("componentstate")]
		public ComponentState? ComponentState
		{
			get
			{
				return (ComponentState?)GetAttributeValue<OptionSetValue>("componentstate")?.Value;
			}
		}
		
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("createdby");
			}
		}
		
		[AttributeLogicalNameAttribute("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("createdon");
			}
		}
		
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				SetAttributeValue("iscustomizable", nameof(Customizable), value);
			}
		}
		
		public const string EntityLogicalCollectionName = "roles";
		
		public const string EntityLogicalName = "role";
		
		public const string EntitySetName = "roles";
		
		[AttributeLogicalNameAttribute("roleid")]
		public new virtual Guid Id
		{
			get
			{
				return base.Id != default ? base.Id : GetAttributeValue<Guid>("roleid");
			}
			set
			{
				SetAttributeValue("roleid", nameof(Id), value);
				base.Id = value;
			}
		}
		
		[AttributeLogicalNameAttribute("isinherited")]
		public IsInherited? IsInherited
		{
			get
			{
				return (IsInherited?)GetAttributeValue<OptionSetValue>("isinherited")?.Value;
			}
			set
			{
				SetAttributeValue("isinherited", nameof(IsInherited), value.HasValue ? new OptionSetValue((int)value.Value) : null);
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return GetAttributeValue<EntityReference>("modifiedby");
			}
		}
		
		[AttributeLogicalNameAttribute("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				return GetAttributeValue<DateTime?>("modifiedon");
			}
		}
		
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return GetAttributeValue<string>("name");
			}
			set
			{
				SetAttributeValue("name", nameof(Name), value);
			}
		}
		
		[AttributeLogicalNameAttribute("organizationid")]
		public Guid? Organization
		{
			get
			{
				return GetAttributeValue<Guid?>("organizationid");
			}
		}
		
		[AttributeLogicalNameAttribute("parentroleid")]
		public EntityReference ParentRole
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentroleid");
			}
		}
		
		[AttributeLogicalNameAttribute("parentroleid")]
		[RelationshipSchemaNameAttribute("role_parent_role", EntityRole.Referencing)]
		public SecurityRole ParentRole_SecurityRole
		{
			get
			{
				return GetRelatedEntity<SecurityRole>("role_parent_role", EntityRole.Referencing);
			}
		}
		
		[RelationshipSchemaNameAttribute("role_parent_role", EntityRole.Referenced)]
		public IEnumerable<SecurityRole> ParentRole_SecurityRoles
		{
			get
			{
				return GetRelatedEntities<SecurityRole>("role_parent_role", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<SecurityRole>("role_parent_role", nameof(ParentRole_SecurityRoles), value, EntityRole.Referenced);
			}
		}
		
		[AttributeLogicalNameAttribute("parentrootroleid")]
		public EntityReference ParentRootRole
		{
			get
			{
				return GetAttributeValue<EntityReference>("parentrootroleid");
			}
		}
		
		[AttributeLogicalNameAttribute("parentrootroleid")]
		[RelationshipSchemaNameAttribute("role_parent_root_role", EntityRole.Referencing)]
		public SecurityRole ParentRootRole_SecurityRole
		{
			get
			{
				return GetRelatedEntity<SecurityRole>("role_parent_root_role", EntityRole.Referencing);
			}
		}
		
		[RelationshipSchemaNameAttribute("role_parent_root_role", EntityRole.Referenced)]
		public IEnumerable<SecurityRole> ParentRootRole_SecurityRoles
		{
			get
			{
				return GetRelatedEntities<SecurityRole>("role_parent_root_role", EntityRole.Referenced);
			}
			set
			{
				SetRelatedEntities<SecurityRole>("role_parent_root_role", nameof(ParentRootRole_SecurityRoles), value, EntityRole.Referenced);
			}
		}
		
		[AttributeProvider(typeof(RolePrivileges))]
		[RelationshipSchemaNameAttribute("roleprivileges_association")]
		public IEnumerable<Privilege> Privileges
		{
			get
			{
				return GetRelatedEntities<Privilege>("roleprivileges_association");
			}
			set
			{
				SetRelatedEntities<Privilege>("roleprivileges_association", nameof(Privileges), value);
			}
		}
		
		[AttributeLogicalNameAttribute("roletemplateid")]
		public EntityReference RoleTemplate
		{
			get
			{
				return GetAttributeValue<EntityReference>("roletemplateid");
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public Guid? Solution
		{
			get
			{
				return GetAttributeValue<Guid?>("solutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("supportingsolutionid")]
		public Guid? Solution2
		{
			get
			{
				return GetAttributeValue<Guid?>("supportingsolutionid");
			}
		}
		
		[AttributeLogicalNameAttribute("ismanaged")]
		public bool? State
		{
			get
			{
				return GetAttributeValue<bool?>("ismanaged");
			}
		}
		
		[AttributeLogicalNameAttribute("roleidunique")]
		public Guid? UniqueId
		{
			get
			{
				return GetAttributeValue<Guid?>("roleidunique");
			}
		}
		
		[DataContract()]
		public struct LogicalNames
		{
			
			public const string BusinessUnit = "businessunitid";
			
			public const string CanBeDeleted = "canbedeleted";
			
			public const string ComponentState = "componentstate";
			
			public const string CreatedBy = "createdby";
			
			public const string CreatedOn = "createdon";
			
			public const string Customizable = "iscustomizable";
			
			public const string Id = "roleid";
			
			public const string IsInherited = "isinherited";
			
			public const string ModifiedBy = "modifiedby";
			
			public const string ModifiedOn = "modifiedon";
			
			public const string Name = "name";
			
			public const string Organization = "organizationid";
			
			public const string ParentRole = "parentroleid";
			
			public const string ParentRootRole = "parentrootroleid";
			
			public const string RoleTemplate = "roletemplateid";
			
			public const string Solution = "solutionid";
			
			public const string Solution2 = "supportingsolutionid";
			
			public const string State = "ismanaged";
			
			public const string UniqueId = "roleidunique";
		}
		
		[DataContract()]
		public struct Relationships
		{
			
			public const string ParentRole_SecurityRole = "role_parent_role";
			
			public const string ParentRole_SecurityRoles = "role_parent_role";
			
			public const string ParentRootRole_SecurityRole = "role_parent_root_role";
			
			public const string ParentRootRole_SecurityRoles = "role_parent_root_role";
			
			public const string Privileges = "roleprivileges_association";
		}
	}
	
	[DataContract()]
	[ExcludeFromCodeCoverage()]
	public abstract class EarlyEntity : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		public EarlyEntity(string entityLogicalName) : base(entityLogicalName) { }
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		protected void OnPropertyChanged(string propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
		
		protected void OnPropertyChanging(string propertyName)
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
            }
        }
		
		public IEnumerable<T> GetAttributeValues<T>(string attributeLogicalName) where T : Entity
	    {
		    return base.GetAttributeValue<EntityCollection>(attributeLogicalName)?.Entities?.Cast<T>();
	    }
		
		public IEnumerable<T> GetAttributeEnums<T>(string attributeLogicalName) where T : struct, IConvertible
	    {
		    return base.GetAttributeValue<OptionSetValueCollection>(attributeLogicalName)?.Select(x => (T)(object)x.Value);
	    }
		
		protected void SetAttributeValues<T>(string logicalName, string attributePropertyName, IEnumerable<T> value)  where T : Entity
        {
            SetAttributeValue(logicalName, attributePropertyName, new EntityCollection(new List<Entity>(value)));
        }
		
		protected void SetAttributeEnums<T>(string logicalName, string attributePropertyName, IEnumerable<T> value)  where T : struct, IConvertible
        {
            SetAttributeValue(logicalName, attributePropertyName, new OptionSetValueCollection(new List<OptionSetValue>(value.Select(x => new OptionSetValue((int)(object)x)))));
        }
		
		protected void SetAttributeValue(string logicalName, string attributePropertyName, object value)
        {
            OnPropertyChanging(attributePropertyName);
            base.SetAttributeValue(logicalName, value);
            OnPropertyChanged(attributePropertyName);
        }
		
		protected new T GetRelatedEntity<T>(string relationshipSchemaName, EntityRole? primaryEntityRole = null) where T : Entity
        {
            return base.GetRelatedEntity<T>(relationshipSchemaName, primaryEntityRole);
        }
		
		protected void SetRelatedEntity<T>(string relationshipSchemaName, string attributePropertyName, T entity, EntityRole? primaryEntityRole = null) where T : Entity
        {
            OnPropertyChanging(attributePropertyName);
            base.SetRelatedEntity(relationshipSchemaName, primaryEntityRole, entity);
            OnPropertyChanged(attributePropertyName);
        }
		
		protected new IEnumerable<T> GetRelatedEntities<T>(string relationshipSchemaName, EntityRole? primaryEntityRole = null) where T : Entity
        {
            return base.GetRelatedEntities<T>(relationshipSchemaName, primaryEntityRole);
        }
		
		protected void SetRelatedEntities<T>(string relationshipSchemaName, string attributePropertyName, IEnumerable<T> entities, EntityRole? primaryEntityRole = null) where T : Entity
        {
            OnPropertyChanging(attributePropertyName);
            base.SetRelatedEntities(relationshipSchemaName, primaryEntityRole, entities);
            OnPropertyChanged(attributePropertyName);
        }
	}
}
